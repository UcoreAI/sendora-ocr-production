# Sendora OCR - Localhost Demo

A localhost implementation of the Sendora OCR system for testing AI-powered document processing and Job Order generation for door manufacturing.

## üöÄ Quick Start

### Prerequisites

1. **Python 3.8+** - Download from [python.org](https://python.org)
2. **OCR API Credentials** (Optional - can use demo mode):
   - **Google Cloud Vision API** - Set up at [Google Cloud Console](https://console.cloud.google.com)
   - **Azure Computer Vision** - Set up at [Azure Portal](https://portal.azure.com)

### Installation

1. **Clone or navigate to the project directory**:
   ```bash
   cd sendora-ocr-localhost
   ```

2. **Install Python dependencies**:
   ```bash
   pip install -r requirements.txt
   ```

3. **Configure OCR APIs** (Interactive setup):
   ```bash
   python config_setup.py
   ```
   
   Or set up manually by editing `.env` file:
   ```env
   # For Google Cloud Vision API
   GOOGLE_CLOUD_PROJECT_ID=your-project-id
   GOOGLE_APPLICATION_CREDENTIALS=path/to/service-account.json
   
   # For Azure Computer Vision
   AZURE_COMPUTER_VISION_ENDPOINT=https://your-region.api.cognitive.microsoft.com/
   AZURE_COMPUTER_VISION_KEY=your-subscription-key
   
   # Provider selection: google, azure, both, or demo
   OCR_PROVIDER=both
   USE_DEMO_MODE=False
   ```

4. **Run the application**:
   ```bash
   python run.py
   ```

5. **Open your browser and go to**:
   ```
   http://localhost:5000
   ```

## üìÅ Project Structure

```
sendora-ocr-localhost/
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îî‚îÄ‚îÄ app.py              # Main Flask application
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ index.html          # Upload interface
‚îÇ   ‚îî‚îÄ‚îÄ results.html        # Results display
‚îú‚îÄ‚îÄ uploads/                # Uploaded documents (auto-created)
‚îú‚îÄ‚îÄ temp/                   # Temporary processing files (auto-created)
‚îú‚îÄ‚îÄ job_orders/             # Generated Job Order PDFs (auto-created)
‚îú‚îÄ‚îÄ templates/              # Future: Custom JO templates
‚îú‚îÄ‚îÄ static/                 # Static assets
‚îú‚îÄ‚îÄ requirements.txt        # Python dependencies
‚îú‚îÄ‚îÄ .env                    # Environment configuration
‚îú‚îÄ‚îÄ run.py                  # Application launcher
‚îî‚îÄ‚îÄ README.md              # This file
```

## ‚ú® Features

### Core Functionality
- **Document Upload**: Support for PDF, JPG, PNG, TIFF files
- **Advanced OCR Processing**: Google Cloud Vision & Azure Computer Vision APIs
- **Multi-Provider Intelligence**: Combines results from multiple OCR providers
- **Data Extraction**: Pattern-based field recognition for Malaysian business documents
- **Job Order Generation**: Automatic PDF generation with 3 template types
- **Mock Workflow**: Simulated WhatsApp approval process

### Template Types
1. **Template A**: Door & Frame Measurements
2. **Template B**: Product-Specific Job Orders
3. **Template C**: Custom/Flexible Job Orders

### Extracted Data Fields
- PO/Invoice numbers and dates
- Company and vendor information
- Door dimensions and specifications
- Material requirements
- Pricing information
- And more...

## üîß Configuration

Edit `.env` file to customize settings:

```env
FLASK_ENV=development
FLASK_DEBUG=True
OCR_CONFIDENCE_THRESHOLD=60    # Minimum OCR confidence (0-100)
MAX_FILE_SIZE=16777216         # 16MB max file size
ALLOWED_EXTENSIONS=pdf,png,jpg,jpeg,tiff
```

## üìä Usage Workflow

1. **Upload Document**: Drag & drop or select file via web interface
2. **OCR Processing**: System extracts text with confidence scoring
3. **Data Extraction**: AI identifies relevant fields using pattern matching
4. **Template Selection**: System chooses appropriate JO template
5. **PDF Generation**: Job Order PDF is created automatically
6. **Review & Approval**: Download PDF and use mock approval workflow

## üß™ Testing

### Sample Documents
Test with various document types:
- Purchase Orders with door specifications
- Sales invoices with measurements
- Product catalogs with material information
- Custom manufacturing requests

### Expected Results
- OCR accuracy >95% for clear printed text
- Field extraction for standard Malaysian business formats
- PDF generation with proper template mapping
- Mock WhatsApp workflow simulation

## üîç Troubleshooting

### Common Issues

1. **"OCR API credentials not found"**
   - Run `python config_setup.py` to configure APIs
   - Or enable demo mode: `USE_DEMO_MODE=True` in .env
   - Check API credentials are valid and have proper permissions

2. **"Google Vision API error"**
   - Ensure service account JSON file exists and is accessible
   - Check that Vision API is enabled in Google Cloud Console
   - Verify project ID and credentials path in .env

3. **"Azure Computer Vision error"**
   - Verify endpoint URL is correct (includes region)
   - Check API key is valid and not expired
   - Ensure Computer Vision resource is active in Azure

4. **Poor OCR Results**
   - Use higher resolution images (300+ DPI recommended)
   - Ensure good contrast between text and background
   - Try different OCR providers (google vs azure)

5. **File Upload Errors**
   - Check file size (max 16MB)
   - Verify file format is supported
   - Ensure uploads/ directory has write permissions

6. **Missing Dependencies**
   - Run: `pip install -r requirements.txt`
   - Ensure Python 3.8+ is being used
   - For API packages: `pip install google-cloud-vision azure-cognitiveservices-vision-computervision`

### Debug Mode
The application runs in debug mode by default. Check console output for detailed error messages.

## üöÄ Next Steps for Production

This localhost demo provides the foundation for the full Sendora OCR system. For production deployment:

1. **Replace Tesseract** with Azure Computer Vision or Google Document AI
2. **Add Real WhatsApp Integration** using Whapi Cloud API
3. **Implement User Authentication** and role-based access
4. **Add Database Storage** for processing history and audit trails
5. **Deploy to Cloud** with proper scaling and monitoring
6. **Add Training Interface** for custom field mapping
7. **Integrate with Manufacturing Systems** for real workflow automation

## üìù API Endpoints

- `GET /` - Main upload interface
- `POST /upload` - Document upload and processing
- `GET /process/<filename>` - Process uploaded document
- `GET /download_jo/<filename>` - Download generated Job Order
- `GET /approve/<filename>` - Mock approval workflow
- `GET /reject/<filename>` - Mock rejection workflow
- `GET /api/status` - System status check

## üõ† Technology Stack

- **Backend**: Flask (Python)
- **OCR Engine**: Tesseract OCR
- **Image Processing**: OpenCV, Pillow
- **PDF Generation**: ReportLab
- **Frontend**: Bootstrap 5, JavaScript
- **Data Processing**: Pandas, NumPy

## üìÑ License

This is a demonstration project for the Sendora OCR system concept.

---

**Status**: Localhost Demo Ready  
**Version**: 1.0.0  
**Last Updated**: 2025-08-12